"use strict";(self.webpackChunkmercury_docs=self.webpackChunkmercury_docs||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Mercury Protocol","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mercury Layer Protocol","href":"/docs/tutorial-basics/create-a-page","docId":"tutorial-basics/create-a-page","unlisted":false},{"type":"link","label":"Atomic transfer","href":"/docs/tutorial-basics/create-a-document","docId":"tutorial-basics/create-a-document","unlisted":false},{"type":"link","label":"Lightning Latch","href":"/docs/tutorial-basics/create-a-blog-post","docId":"tutorial-basics/create-a-blog-post","unlisted":false}],"href":"/docs/category/mercury-protocol"},{"type":"category","label":"Rust client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Tutorial - Rust","href":"/docs/tutorial-extras/manage-docs-versions","docId":"tutorial-extras/manage-docs-versions","unlisted":false},{"type":"link","label":"Atomic swap","href":"/docs/tutorial-extras/translate-your-site","docId":"tutorial-extras/translate-your-site","unlisted":false},{"type":"link","label":"Client API","href":"/docs/tutorial-extras/client-api","docId":"tutorial-extras/client-api","unlisted":false}],"href":"/docs/category/rust-client"},{"type":"category","label":"NodeJS client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Tutorial - nodejs","href":"/docs/nodejs-client/manage-docs-versions","docId":"nodejs-client/manage-docs-versions","unlisted":false},{"type":"link","label":"Client API","href":"/docs/nodejs-client/client-api","docId":"nodejs-client/client-api","unlisted":false}],"href":"/docs/category/nodejs-client"},{"type":"category","label":"Kotlin client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Client API","href":"/docs/kotlin-client/client-api","docId":"kotlin-client/client-api","unlisted":false}],"href":"/docs/category/kotlin-client"}]},"docs":{"intro":{"id":"intro","title":"Introduction","description":"Mercury layer is an implementation of a system the uses a blind co-signing and key-update service to enable statechains on Bitcoin. The statechain protocol allows the transfer of ownership of Bitcoin unspent transaction outputs (UTXOs) that remain under the full custody of the owner at all times, while benefiting from instant and zero cost transactions. The ability to perform this transfer without requiring the confirmation (mining) of on-chain transactions has advantages in a variety of different applications.","sidebar":"tutorialSidebar"},"kotlin-client/client-api":{"id":"kotlin-client/client-api","title":"Client API","description":"To use the standalone Kotlin client app, first clone the mercurylayer repository:","sidebar":"tutorialSidebar"},"nodejs-client/client-api":{"id":"nodejs-client/client-api","title":"Client API","description":"node index.js create-wallet  to create a wallet","sidebar":"tutorialSidebar"},"nodejs-client/manage-docs-versions":{"id":"nodejs-client/manage-docs-versions","title":"Tutorial - nodejs","description":"To use the NodeJS client app, first clone the mercurylayer repository:","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-blog-post":{"id":"tutorial-basics/create-a-blog-post","title":"Lightning Latch","description":"A latch transfer enables a statecoin to be transferred on condition of the sucessful payment of a Lightning network invoice. This is a protocol that enforces atomicity of a statecoin transfer and lightning payment - it can be used for the sale of a statecoin UTXO for an arbtrary amount of bitcoin in a private and non-custodial way without counterparty risk.","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-document":{"id":"tutorial-basics/create-a-document","title":"Atomic transfer","description":"The purpose of the atomic transfer protocol is to enable two (or more) coin transfers to be completed in a way that they all complete or none of them do. This effectively means that the transfer-receiver function and key update is only completed if both receivers have the correct information to proceed. Once each receiver has verified that the transfer message they have received is valid, then the other parties can be allowed to complete transfer-receiver.","sidebar":"tutorialSidebar"},"tutorial-basics/create-a-page":{"id":"tutorial-basics/create-a-page","title":"Mercury Layer Protocol","description":"Preliminaries","sidebar":"tutorialSidebar"},"tutorial-extras/client-api":{"id":"tutorial-extras/client-api","title":"Client API","description":"cargo run create-wallet  to create a wallet","sidebar":"tutorialSidebar"},"tutorial-extras/manage-docs-versions":{"id":"tutorial-extras/manage-docs-versions","title":"Tutorial - Rust","description":"The rust client acts as a standalone command line client for mercury layer that can demonstrate the main wallet operations. The wallet state is saved in a local sqlite database.","sidebar":"tutorialSidebar"},"tutorial-extras/translate-your-site":{"id":"tutorial-extras/translate-your-site","title":"Atomic swap","description":"To perform an atomic swap of two separate mercurylayer coins, first create four separate wallets:","sidebar":"tutorialSidebar"}}}}')}}]);